number of opcodes (each opcode is 12 bytes)
unknown 4b
opcodes (count * 12): opcode arg1 arg2
strings (4b length counting the '\0' then 0-terminated string)
name "dialogue" are separated by 0x01

function executing opcodes: FUN_004110c0

opcodes:
- 0x00 return 1
- 0x01 add 2 ints (stack)
- 0x02 sub 2 ints (stack)
- 0x03 mul 2 ints (stack)
- 0x04 div 2 ints (stack)
- 0x05 mod 2 ints (stack)
- 0x06 neg int (stack)
- 0x07 cmp
- 0x08 unconditional jump
- 0x09 conditional jump if false (if (stack_top != 0) { if (arg1 != 0) push_bool(true) } else jump_to(arg2))
- 0x0a conditional jump if true (if (stack_top != 0) jump_to(arg2) else if arg1 != 0 push_bool(true))
- 0x0b ???
- 0x0c pop stack
- 0x0d push arg1 (of type int) then returns 2
- 0x0e return 4
- 0x0f ???
- 0x10 ???
- 0x11 push literal
- 0x12 ???
- 0x13 ???
- 0x14 do nothing?
- 0x15 do nothing?
- 0x17 push arg1 (of type int) then returns 3

0x11 is "push <type> <value>"
- 0x00 int
- 0x01 bool
- 0x02 string

0x0D seems to be "push_int" then execute action based on it. (since it returns 2 instead of continuing executing like 0x11)
- 0x0B execute script
- 0x12 set charater layer?
- 0x23 preceded by 3 "push_int" (200 or 255) so colour? which? text?
- 0x24 preceded by 3 "push_int" (0 or 120) so colour? which? background?
- 0x25 preceded by 2 "push_int" (0 then 1)
- 0x2C set line as read
- 0x3A set button UI (used for dialogue box)
- 0x4F seems to be choices (choices followed by an int: 4 = 2 choices, 5 = 3 choices)

0x07 is CMP:
- 0x00: EQ
- 0x01: NE
- 0x02: LT
- 0x03: LE
- 0x04: GT
- 0x05: GE

0x10:
switch is based on arg2:
- 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c: push on top of the stack the value arg1 with a new type.
- 0x01, 0x03, 0x05, 0x07, 0x09, 0x0b, 0x0d: replace stack and adding arg1 to the top of the stack.
types are from 3 to 9. (i.e. "unknown")

0x09 && 0x0a:
- why is there a "push_bool" in the "else" case? push the value that has been read/popped?

0x0b: pops 2 values from the stack, set a variable then push_int(1)
- 0x03: 0x296c[2nd] = 1st
- 0x04: 0x2970[2nd] = 1st == 1
- 0x05: ???
- 0x09: 0x2984[2nd] = 1st

0x0f: switch (arg2)
- 0x00: get_296c(arg1). i.e. push_int(0x296c[arg1]); // variable (used in __MAINSTREAM to check which girl route you'll get)
- 0x06: get_2978(arg1). i.e. push_int(0x2978[arg1]);
- 0x0c: get_2984(arg1). i.e. push_int(0x2984[arg1]);

0x0d:
- 10: LoadSNX
- 11: CallSNX
- 12: change window title + something?
- 13: ???
- 14: ???
- 15: ???
- 16: some crit sec thingies
- 17: crit sec thingies too (code looks similar)
- 18: LoadLayer
- 19: LoadMaskLayer
- 20: ???
- 21: ???
- 22: ???
- 23: ???
- 26: StartupGraphicsEffect
- 29: ???
- 30: ???
- 31: ???
- 32: ???
- 33: ???
- 34: ???
- 35: ???
- 36: ???
- 37: ???
- 38: ???
- 39: ???
- 40: ???
- 41: ???
- 42: ???
- 43: ???
- 44: ???
- 45: ???
- 46: ???
- 47: ???
- 49: ???
- 50: ???
- 52: ???
- 54: ???
- 55: ???
- 56: ???
- 57: ???
- 58: ???
- 59: ???
- 61: ???
- 62: ???
- 63: ???
- 64: ???
- 65: ???
- 66: ???
- 74: ???
- 75: ???
- 77: ???
- 80: ???
- 81: ???
- 86: ???
- 87: ???
- 88: ???
- 89: ???
- 90: ???
- 91: ???
- 94: ???
- 119: ???
- 126: ???
- 129: ???


runtime:
param_1/this + 0x2948 = bytecode index
param_1/this + 0x2940 + X * 0x0C = bytecode[X]
param_1/this + 0x2938 = bytecode size

param_1/this + 0x1830 = stack index
param_1/this + 0x30 + X * 8 = stack[X] (each value on the stack are a pair of int32, first one seems to be "type", second is the value)


param_1/this + 0x294c = length of "xxxx1" = 32 (seems to contains some vars like the "girls' interests")
param_1/this + 0x2950 = length of "xxxx2"
param_1/this + 0x2954 = length of "xxxx3"
param_1/this + 0x2958 = length of "xxxx4" = 393 is the max value I found in code
param_1/this + 0x295c = length of "xxxx5"
param_1/this + 0x2960 = length of "xxxx6"
param_1/this + 0x2964 = length of "xxxx7" = 368 is the max value I found in code
param_1/this + 0x2968 = length of "xxxx8"

param_1/this + 0x296c = array "xxxx1" (1 bytes)
param_1/this + 0x2970 = array "xxxx2" (1 byte)
param_1/this + 0x2974 = array "xxxx3" (8 bytes)
param_1/this + 0x2978 = array "xxxx4" (4 bytes)
param_1/this + 0x297c = array "xxxx5" (1 byte)
param_1/this + 0x2980 = array "xxxx6" (8 bytes)
param_1/this + 0x2984 = array "xxxx7" (4 bytes)
param_1/this + 0x2988 = array "xxxx8" (1 byte)

known indices:
0x296c[15] = agnes
0x296c[16] = cleo
0x296c[17] = sofie
